<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
<Token>
    <TokenIdentifier>//apple_ref/occ/cl/AppBlade</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Our main class. AppBlade contains our singleton and all public methods, which are used as entrypoints for the lower level managers.</Abstract>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/clm/AppBlade/logSDKVersion</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Log SDK Version to NSLog</Abstract>
    <Declaration>+ (&lt;span class="type"&gt;void&lt;/span&gt;)&lt;span class="var"&gt;logSDKVersion&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/clm/AppBlade/sdkVersion</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Returns SDK Version</Abstract>
    <Declaration>+ (&lt;span class="type"&gt;NSString&lt;/span&gt;&lt;span class="type"&gt;*&lt;/span&gt;)&lt;span class="var"&gt;sdkVersion&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/clm/AppBlade/sharedManager</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Our singleton reference, and the only way that
AppBlade shoud be referenced.</Abstract>
    <Declaration>+ (&lt;span class="type"&gt;AppBlade&lt;/span&gt; &lt;span class="type"&gt;*&lt;/span&gt;)&lt;span class="var"&gt;sharedManager&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/allowFeedbackReporting</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Initializes the Feedback Reporting Feature</Abstract>
    <Declaration>- (&lt;span class="type"&gt;void&lt;/span&gt;)&lt;span class="var"&gt;allowFeedbackReporting&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/allowFeedbackReportingForWindow:withOptions:</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Initializes the Feedback Reporting Feature with
additional options</Abstract>
    <Declaration>- (&lt;span class="type"&gt;void&lt;/span&gt;)&lt;span class="function"&gt;allowFeedbackReportingForWindow&lt;/span&gt;:(&lt;span class="type"&gt;UIWindow&lt;/span&gt;&lt;span class="type"&gt;*&lt;/span&gt;)&lt;span class="param"&gt;window&lt;/span&gt; 
        &lt;span class="function"&gt;withOptions&lt;/span&gt;:(&lt;span class="type"&gt;AppBladeFeedbackSetupOptions&lt;/span&gt;)&lt;span class="var"&gt;options&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/appBladeDeviceSecret</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Our AppBlade-issued device secret. Used in API
calls.</Abstract>
    <Declaration>-(&lt;span class="type"&gt;NSString&lt;/span&gt;&lt;span class="type"&gt;*&lt;/span&gt;) &lt;span class="var"&gt;appBladeDeviceSecret&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/catchAndReportCrashes</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Sets up variables &amp; Checks if any crashes have
ocurred, sends logs to AppBlade.</Abstract>
    <Declaration>- (&lt;span class="type"&gt;void&lt;/span&gt;)&lt;span class="var"&gt;catchAndReportCrashes&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/checkApproval</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Checks with AppBlade to see if the app is allowed
to run on this device.</Abstract>
    <Declaration>- (&lt;span class="type"&gt;void&lt;/span&gt;)&lt;span class="var"&gt;checkApproval&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/checkForExistingCrashReports</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Method to call if you want to attempt to send crash
reports more often than ususal</Abstract>
    <Declaration>- (&lt;span class="type"&gt;void&lt;/span&gt;)&lt;span class="var"&gt;checkForExistingCrashReports&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/checkForUpdates</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Checks with AppBlade anonymously to see if the app
can be updated with a new build.</Abstract>
    <Declaration>- (&lt;span class="type"&gt;void&lt;/span&gt;)&lt;span class="var"&gt;checkForUpdates&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/cleanOutKeychain</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Clears ALL reachable items in the keychain. Very
dangerous.</Abstract>
    <Declaration>- (&lt;span class="type"&gt;void&lt;/span&gt;)&lt;span class="var"&gt;cleanOutKeychain&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/clearAllCustomParams</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Destructive function that clears all current stored
params.</Abstract>
    <Declaration>-(&lt;span class="type"&gt;void&lt;/span&gt;)&lt;span class="var"&gt;clearAllCustomParams&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/clearAppBladeKeychain</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Clears AppBlade Related keychains</Abstract>
    <Declaration>- (&lt;span class="type"&gt;void&lt;/span&gt;)&lt;span class="var"&gt;clearAppBladeKeychain&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/currentSession</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Retrieves a copy of the current session data if one
exists. The object returned does nothing to affect
the actual session.</Abstract>
    <Declaration>- (&lt;span class="type"&gt;NSDictionary&lt;/span&gt;&lt;span class="type"&gt;*&lt;/span&gt;)&lt;span class="var"&gt;currentSession&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/getCustomParams</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Getter function for all current stored params</Abstract>
    <Declaration>-(&lt;span class="type"&gt;NSDictionary&lt;/span&gt; &lt;span class="type"&gt;*&lt;/span&gt;)&lt;span class="var"&gt;getCustomParams&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/handleBackloggedFeedback</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Helper function to manually trigger a feedback
check.</Abstract>
    <Declaration>- (&lt;span class="type"&gt;void&lt;/span&gt;)&lt;span class="var"&gt;handleBackloggedFeedback&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/handleCrashReport</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Function called when app resumes from crash.</Abstract>
    <Declaration>- (&lt;span class="type"&gt;void&lt;/span&gt;)&lt;span class="var"&gt;handleCrashReport&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/logSessionEnd</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Ends a the current Session Tracking session, if one
exists. Does nothing otherwise.</Abstract>
    <Declaration>- (&lt;span class="type"&gt;void&lt;/span&gt;)&lt;span class="var"&gt;logSessionEnd&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/logSessionStart</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Starts a new Session Tracking session.</Abstract>
    <Declaration>- (&lt;span class="type"&gt;void&lt;/span&gt;)&lt;span class="var"&gt;logSessionStart&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/randomString:</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Creates a random string of a specified length</Abstract>
    <Declaration>- (&lt;span class="type"&gt;NSString&lt;/span&gt;&lt;span class="type"&gt;*&lt;/span&gt;)&lt;span class="function"&gt;randomString&lt;/span&gt;:(&lt;span class="type"&gt;int&lt;/span&gt;)&lt;span class="var"&gt;length&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/registerWithAppBladePlist</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Initial registration method, use before enything else.</Abstract>
    <Declaration>- (&lt;span class="type"&gt;void&lt;/span&gt;)&lt;span class="var"&gt;registerWithAppBladePlist&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/registerWithAppBladePlistNamed:</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Initial registration method, use before enything else.</Abstract>
    <Declaration>- (&lt;span class="type"&gt;void&lt;/span&gt;)&lt;span class="function"&gt;registerWithAppBladePlistNamed&lt;/span&gt;:(&lt;span class="type"&gt;NSString&lt;/span&gt;&lt;span class="type"&gt;*&lt;/span&gt;)&lt;span class="var"&gt;plistName&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/sanitizeKeychain</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Trie to intelligently clear keychains if we need it</Abstract>
    <Declaration>- (&lt;span class="type"&gt;void&lt;/span&gt;)&lt;span class="var"&gt;sanitizeKeychain&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/setAppBladeDeviceSecret:</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Setter method for the device secret. Used in API
calls</Abstract>
    <Declaration>-(&lt;span class="type"&gt;void&lt;/span&gt;) &lt;span class="function"&gt;setAppBladeDeviceSecret&lt;/span&gt;:(&lt;span class="type"&gt;NSString&lt;/span&gt; &lt;span class="type"&gt;*&lt;/span&gt;)&lt;span class="var"&gt;appBladeDeviceSecret&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/setCustomParam:forKey:</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Define special custom fields to be sent back to
Appblade in your Feedback reports or Crash reports</Abstract>
    <Declaration>-(&lt;span class="type"&gt;void&lt;/span&gt;)&lt;span class="function"&gt;setCustomParam&lt;/span&gt;:(&lt;span class="type"&gt;id&lt;/span&gt;)&lt;span class="param"&gt;object&lt;/span&gt; &lt;span class="function"&gt;forKey&lt;/span&gt;:(&lt;span class="type"&gt;NSString&lt;/span&gt;&lt;span class="type"&gt;*&lt;/span&gt;)&lt;span class="var"&gt;key&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/setCustomParams:</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Setter function for current stored params</Abstract>
    <Declaration>-(&lt;span class="type"&gt;void&lt;/span&gt;)&lt;span class="function"&gt;setCustomParams&lt;/span&gt;:(&lt;span class="type"&gt;NSDictionary&lt;/span&gt; &lt;span class="type"&gt;*&lt;/span&gt;)&lt;span class="var"&gt;newCustomParams&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/showFeedbackDialogue</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Shows a feedback dialogue and handles screenshot</Abstract>
    <Declaration>- (&lt;span class="type"&gt;void&lt;/span&gt;)&lt;span class="var"&gt;showFeedbackDialogue&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instm/AppBlade/showFeedbackDialogueWithOptions:</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Shows a feedback dialogue and handles screenshot
with additional options</Abstract>
    <Declaration>- (&lt;span class="type"&gt;void&lt;/span&gt;)&lt;span class="function"&gt;showFeedbackDialogueWithOptions&lt;/span&gt;:(&lt;span class="type"&gt;AppBladeFeedbackDisplayOptions&lt;/span&gt;)&lt;span class="var"&gt;options&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instp/AppBlade/appBladeHost</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Our endpoint. Usually the AppBlade host name, but it can be custom</Abstract>
    <Declaration>@property (&lt;span class="param"&gt;nonatomic&lt;/span&gt;,
    &lt;span class="param"&gt;retain&lt;/span&gt;) &lt;span class="type"&gt;NSString&lt;/span&gt;&lt;span class="type"&gt;*&lt;/span&gt; &lt;span class="var"&gt;appBladeHost&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instp/AppBlade/appBladeProjectSecret</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>AppBlade API project-issued secret.</Abstract>
    <Declaration>@property (&lt;span class="param"&gt;nonatomic&lt;/span&gt;,
    &lt;span class="param"&gt;retain&lt;/span&gt;) &lt;span class="type"&gt;NSString&lt;/span&gt;&lt;span class="type"&gt;*&lt;/span&gt; &lt;span class="var"&gt;appBladeProjectSecret&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/instp/AppBlade/delegate</TokenIdentifier>
    <Path>AppBlade_h/Classes/AppBlade/index.html</Path>
    <Abstract>Delegate to receive messages regarding device
authentication and other events</Abstract>
    <Declaration>@property (&lt;span class="param"&gt;nonatomic&lt;/span&gt;,
    &lt;span class="param"&gt;assign&lt;/span&gt;) &lt;span class="type"&gt;id&lt;/span&gt;&amp;lt;&lt;span class="template"&gt;AppBladeDelegate&lt;/span&gt;&amp;gt; &lt;span class="var"&gt;delegate&lt;/span&gt;; </Declaration>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/intf/AppBladeDelegate</TokenIdentifier>
    <Path>AppBlade_h/Protocols/AppBladeDelegate/index.html</Path>
    <Abstract>Protocol to receive messages regarding device authentication and other events.</Abstract>
</Token>
<Token>
    <TokenIdentifier>//apple_ref/occ/intfm/AppBladeDelegate/appBlade:applicationApproved:error:</TokenIdentifier>
    <Path>AppBlade_h/Protocols/AppBladeDelegate/index.html</Path>
    <Abstract>This method is called when the delegate is notified of whether the Application was approved to run.</Abstract>
    <Declaration>-(&lt;span class="type"&gt;void&lt;/span&gt;) &lt;span class="function"&gt;appBlade&lt;/span&gt;:(&lt;span class="type"&gt;AppBlade&lt;/span&gt; &lt;span class="type"&gt;*&lt;/span&gt;)&lt;span class="param"&gt;appBlade&lt;/span&gt; &lt;span class="function"&gt;applicationApproved&lt;/span&gt;:(&lt;span class="type"&gt;BOOL&lt;/span&gt;)&lt;span class="param"&gt;approved&lt;/span&gt; 
        &lt;span class="function"&gt;error&lt;/span&gt;:(&lt;span class="type"&gt;NSError&lt;/span&gt;&lt;span class="type"&gt;*&lt;/span&gt;)&lt;span class="var"&gt;error&lt;/span&gt;; </Declaration>
</Token>
</Tokens>
